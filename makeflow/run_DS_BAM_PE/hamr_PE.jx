{
        "define" : {
                "DATA_DIR": ".",
		"DATA_DIR_ABS": "/xdisk/dukepauli/reetututeja/ath_bioprojects",
 		"GENOME_IND": "/xdisk/dukepauli/reetututeja/old_ericdisk_backup/genome_indexes",
                "SING_CONT": "singularity run --cleanenv /xdisk/dukepauli/reetututeja/old_ericdisk_backup/hamr_pipeline", #Sing containers
        },

    "rules": [
      # Convert BAM to SAM
        {
        "command" : template("{SING_CONT}/samtools_1.10.sif samtools view -h -o {DATA_DIR}/{X}_fwd.sam {DATA_DIR}/{X}_fwd/accepted_hits.bam"),
        "inputs" : [DATA_DIR+"/"+X+"_fwd/accepted_hits.bam"],
        "outputs" : [DATA_DIR+"/"+X+"_fwd.sam"]
        } for X in andrew_data,
      # Convert BAM to SAM
        {
        "command" : template("{SING_CONT}/samtools_1.10.sif samtools view -h -o {DATA_DIR}/{X}_rev.sam {DATA_DIR}/{X}_rev/accepted_hits.bam"),
        "inputs" : [DATA_DIR+"/"+X+"_rev/accepted_hits.bam"],
        "outputs" : [DATA_DIR+"/"+X+"_rev.sam"]
        } for X in andrew_data,
      # grep unique reads 1
        {
        "command" : "grep -P '^\@|NH:i:1$' "+DATA_DIR+"/"+Y+"_fwd.sam >"+DATA_DIR+"/"+Y+"_fwd.unique.sam",
	"inputs" : [DATA_DIR+"/"+Y+"_fwd.sam"],
        "outputs" : [DATA_DIR+"/"+Y+"_fwd.unique.sam"]
        } for Y in andrew_data,
      # grep unique reads 2
        {
        "command" : "grep -P '^\@|NH:i:1$' "+DATA_DIR+"/"+Y+"_rev.sam >"+DATA_DIR+"/"+Y+"_rev.unique.sam",
        "inputs" : [DATA_DIR+"/"+Y+"_rev.sam"],
        "outputs" : [DATA_DIR+"/"+Y+"_rev.unique.sam"]
        } for Y in andrew_data,
     # convert bam to sam 1
       {
	"command" : template("{SING_CONT}/samtools_1.10.sif samtools view -bSh {DATA_DIR}/{K}_fwd.unique.sam > {DATA_DIR}/{K}_fwd.unique.bam"),
       "inputs" : [DATA_DIR+"/"+K+"_fwd.unique.sam"],
       "outputs" : [DATA_DIR+"/"+K+"_fwd.unique.bam"] 
       } for K in andrew_data,
     # convert bam to sam 2
       {
        "command" : template("{SING_CONT}/samtools_1.10.sif samtools view -bSh {DATA_DIR}/{K}_rev.unique.sam > {DATA_DIR}/{K}_rev.unique.bam"),
       "inputs" : [DATA_DIR+"/"+K+"_rev.unique.sam"],
       "outputs" : [DATA_DIR+"/"+K+"_rev.unique.bam"]
       } for K in andrew_data, 
     # sort reads 1
       {
       "command" : template("{SING_CONT}/samtools_1.10.sif samtools sort {DATA_DIR}/{Z}_fwd.unique.bam > {DATA_DIR}/{Z}_fwd.sort.bam"),
       "inputs" : [DATA_DIR+"/"+Z+"_fwd.unique.bam"],
       "outputs" : [DATA_DIR+"/"+Z+"_fwd.sort.bam"]
       } for Z in andrew_data,
     # sort reads 2
       {
       "command" : template("{SING_CONT}/samtools_1.10.sif samtools sort {DATA_DIR}/{Z}_rev.unique.bam > {DATA_DIR}/{Z}_rev.sort.bam"),          
       "inputs" : [DATA_DIR+"/"+Z+"_rev.unique.bam"],
       "outputs" : [DATA_DIR+"/"+Z+"_rev.sort.bam"]
       } for Z in andrew_data,
     # merge
     {
      "command" : template("{SING_CONT}/samtools_1.10.sif samtools merge {DATA_DIR}/{A}.merged.bam {DATA_DIR}/{A}_fwd.sort.bam {DATA_DIR}/{A}_rev.sort.bam"),
      "inputs" : [DATA_DIR+"/"+A+"_fwd.sort.bam",DATA_DIR+"/"+A+"_rev.sort.bam"],
      "outputs" : [DATA_DIR+"/"+A+".merged.bam"]
     } for A in andrew_data,
]
}
